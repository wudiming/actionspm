name: SPlayer 全自动构建及容器化

permissions:
  contents: write

on:
  workflow_dispatch:
  schedule:
    # 每周一 00:00 (UTC-8) => 星期一 08:00 UTC
    - cron: '0 8 * * 1'

env:
  PROJECT_DIR: SPlayer
  DOCKER_IMAGE_NAME: splayer-pro

jobs:
  record-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      # ========== 1. Checkout 当前仓库 ==========
      - name: Checkout 当前仓库
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      # ========== 2. 初始化 temp 目录 ==========
      - name: 初始化 temp 目录
        run: mkdir -p temp

      # ========== 3. 读取本地旧版本 ==========
      - name: 读取本地旧版本
        id: read_old_tag
        run: |
          OLD_TAG=$(cat temp/tag.md 2>/dev/null || echo "")
          echo "old_tag=$OLD_TAG" >> $GITHUB_OUTPUT

      # ========== 4. 获取 IamFurina/SPlayer 最新版本号 ==========
      - name: 获取 IamFurina/SPlayer 最新版本号
        id: get_latest_tag
        run: |
          LATEST_TAG=$(git ls-remote --tags https://github.com/IamFurina/SPlayer.git \
            | awk '{print $2}' \
            | sed 's@refs/tags/@@' \
            | grep -E '^[0-9]' \
            | sort -V \
            | tail -n1)
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      # ========== 5. 比对新旧版本 ==========
      - name: 比对新旧版本
        id: compare
        run: |
          if [ "${{ steps.read_old_tag.outputs.old_tag }}" = "${{ steps.get_latest_tag.outputs.latest_tag }}" ]; then
            echo "same=true" >> $GITHUB_OUTPUT
          else
            echo "same=false" >> $GITHUB_OUTPUT
          fi

      # ========== 6. 更新 temp/tag.md 并推送 ==========
      - name: 更新 temp/tag.md 并推送
        if: steps.compare.outputs.same == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ steps.get_latest_tag.outputs.latest_tag }}" > temp/tag.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add temp/tag.md
          git commit -m "chore: 更新 temp/tag.md -> ${{ steps.get_latest_tag.outputs.latest_tag }}"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:main

      # ========== 7. 克隆 SPlayer master-fix分支 ==========
      - name: 克隆仓库 (master-fix分支)
        if: steps.compare.outputs.same == 'false'
        uses: actions/checkout@v4
        with:
          repository: IamFurina/SPlayer
          ref: master-fix
          path: ${{ env.PROJECT_DIR }}

      # ========== 8. 安装依赖与构建逻辑 ==========
      - name: 安装最新 Node.js
        if: steps.compare.outputs.same == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'

      - name: 安装最新 pnpm
        if: steps.compare.outputs.same == 'false'
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 配置环境变量
        if: steps.compare.outputs.same == 'false'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          cp -p .env.example .env
          python <<"EOF"
          import re
          from pathlib import Path
          replacements = {
              'RENDERER_VITE_SERVER_URL': {
                  'value': 'https://musicapi.881128.xyz',
                  'pattern': r'^(RENDERER_VITE_SERVER_URL\\s*=\\s*)(["\\\']?)(.*?)(["\\\']?)(\\s*#.*)?$'
              },
              'VITE_UNM_API': {
                  'value': 'https://unm.881128.xyz',
                  'pattern': r'^(VITE_UNM_API\\s*=\\s*)(["\\\']?)(.*?)(["\\\']?)(\\s*#.*)?$'
              },
              'RENDERER_VITE_SITE_URL': {
                  'value': 'https://music.881128.xyz',
                  'pattern': r'^(RENDERER_VITE_SITE_URL\\s*=\\s*)(["\\\']?)(.*?)(["\\\']?)(\\s*#.*)?$'
              }
          }
          env_file = Path('.env')
          content = env_file.read_text()
          modified = 0
          for key, cfg in replacements.items():
              pattern = re.compile(cfg['pattern'], re.MULTILINE | re.IGNORECASE)
              new_content, count = re.subn(pattern, lambda m: f"{m.group(1)}{cfg['value']}{m.group(5) or ''}", content)
              if count>0:
                  content = new_content
                  modified +=1
              else:
                  content += f"\\n{key} = {cfg['value']}"
                  modified +=1
          if modified!=3: raise ValueError(f"应修改3个配置项，实际修改{modified}")
          content = '\\n'.join(line.rstrip() for line in content.splitlines())
          env_file.write_text(content + '\\n')
          EOF

      - name: 安装项目依赖
        if: steps.compare.outputs.same == 'false'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          rm -rf node_modules/ .pnpm-store/
          pnpm install

      - name: 构建项目
        if: steps.compare.outputs.same == 'false'
        working-directory: ${{ env.PROJECT_DIR }}
        run: pnpm build

      # ========== 9. 生成 Dockerfile 并构建镜像 ==========
      - name: 生成 Dockerfile
        if: steps.compare.outputs.same == 'false'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          cat > Dockerfile.auto << 'DOCKERFILE'
          FROM nginx:1.25-alpine-slim
          COPY out/renderer /usr/share/nginx/html
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          DOCKERFILE

      - name: 构建 Docker 镜像
        if: steps.compare.outputs.same == 'false'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.latest_tag }} -f Dockerfile.auto .
          mkdir -p release
          docker save -o release/${{ steps.get_latest_tag.outputs.latest_tag }}-image.tar ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get_latest_tag.outputs.latest_tag }}

      # ========== 10. 打包并发布 ==========
      - name: 打包发布
        if: steps.compare.outputs.same == 'false'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          tar -czvf release/${{ steps.get_latest_tag.outputs.latest_tag }}.tar.gz -C release .

      - name: 发布到 GitHub Release
        if: steps.compare.outputs.same == 'false'
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.get_latest_tag.outputs.latest_tag }}
          tag_name: ${{ steps.get_latest_tag.outputs.latest_tag }}
          files: |
            ${{ env.PROJECT_DIR }}/release/*.tar.gz
            ${{ env.PROJECT_DIR }}/release/*-image.tar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
