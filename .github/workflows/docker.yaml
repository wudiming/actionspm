name: SPlayer 全自动构建及容器化

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: '发布名称（留空自动生成）'
        required: false
        type: string
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点执行

env:
  PROJECT_DIR: SPlayer  # 大写目录
  DOCKER_IMAGE_NAME: splayer-pro

jobs:
  precise-build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    # ========== 1. 克隆代码 ==========
    - name: 克隆仓库 (master-fix分支)
      uses: actions/checkout@v4
      with:
        repository: IamFurina/SPlayer
        ref: master-fix
        path: ${{ env.PROJECT_DIR }}
        fetch-depth: 0  # 必须获取完整历史记录

    # ========== 2. 检查新tag（定时和手动触发均执行） ==========
    - name: 获取最新tag
      id: get-tag
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "当前最新tag: $LATEST_TAG"

    - name: 恢复缓存的tag
      id: restore-tag
      uses: actions/cache@v3
      with:
        path: ${{ env.PROJECT_DIR }}/.last_tag
        key: last-tag-${{ github.repository }}
        restore-keys: |
          last-tag-${{ github.repository }}

    - name: 检查tag更新
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        # 处理首次运行
        if [ -f .last_tag ]; then
          OLD_TAG=$(cat .last_tag)
          echo "上次记录的tag: $OLD_TAG"
        else
          echo "首次运行，记录当前tag"
          echo "${{ steps.get-tag.outputs.LATEST_TAG }}" > .last_tag
          exit 0  # 首次运行直接继续
        fi

        # 检查是否有新tag
        if [ "${{ steps.get-tag.outputs.LATEST_TAG }}" == "$OLD_TAG" ]; then
          echo "没有新tag，终止流程"
          exit 1
        else
          echo "检测到新tag，更新缓存"
          echo "${{ steps.get-tag.outputs.LATEST_TAG }}" > .last_tag
        fi

    # ========== 3. 配置运行时 ==========
    - name: 安装最新Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'latest'

    - name: 安装最新pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    # ========== 4. 环境变量配置 ========== 
    - name: 配置环境变量 (Python精确处理)
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        cp -p .env.example .env
        python <<"EOF"
        # 原Python脚本保持不变
        EOF

    # ========== 5. 安装依赖 ==========
    - name: 安装项目依赖
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        # 原依赖安装脚本保持不变

    # ========== 6. 构建项目 ==========
    - name: 执行构建
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        # 原构建脚本保持不变

    # ========== 7. 生成Dockerfile ==========
    - name: 创建精简Dockerfile
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        # 原Dockerfile生成脚本保持不变

    # ========== 8. 构建Docker镜像 ==========
    - name: 打包Docker镜像
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        # 动态生成镜像名称
        TAG_NAME="${{ steps.get-tag.outputs.LATEST_TAG }}"
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:$TAG_NAME -f Dockerfile.auto .
        
        # 保存镜像文件（包含tag名）
        mkdir -p release
        docker save -o release/splayer-docker-$TAG_NAME.tar ${{ env.DOCKER_IMAGE_NAME }}:$TAG_NAME

    # ========== 9. 创建发布包 ==========
    - name: 打包构建产物
      working-directory: ${{ env.PROJECT_DIR }}
      run: |
        RELEASE_NAME="${{ steps.get-tag.outputs.LATEST_TAG }}"
        mkdir -p release/${RELEASE_NAME}
        cp -r out/renderer/* release/${RELEASE_NAME}
        tar -czvf release/${RELEASE_NAME}.tar.gz -C release ${RELEASE_NAME}

    # ========== 10. 发布产物 ==========
    - name: 上传到GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "${{ steps.get-tag.outputs.LATEST_TAG }}"
        tag_name: "${{ steps.get-tag.outputs.LATEST_TAG }}"
        body: |
          ## 构建信息
          - 触发方式: ${{ github.event_name }}
          - 构建时间: ${{ github.run_started_at }}
          - 镜像Tag: ${{ steps.get-tag.outputs.LATEST_TAG }}
          
          ## 使用说明
          ```bash
          docker load -i splayer-docker-${{ steps.get-tag.outputs.LATEST_TAG }}.tar
          docker run -p 80:80 ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get-tag.outputs.LATEST_TAG }}
          ```
        files: |
          ${{ env.PROJECT_DIR }}/release/*.tar.gz
          ${{ env.PROJECT_DIR }}/release/splayer-docker-*.tar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
