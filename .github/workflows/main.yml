name: SPlayer 构建发布流程

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: '发布包名称（将作为ZIP文件名）'
        required: true
        type: string

jobs:
  build-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    # ====================== 初始化配置 ======================
    - name: 生成构建标签
      id: tag_gen
      run: echo "tag=$(date +'v%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    # ====================== 代码获取阶段 ======================
    - name: 克隆代码仓库
      uses: actions/checkout@v4
      with:
        repository: 'IamFurina/SPlayer'
        ref: 'master-fix'
        # 深度克隆确保获取所有历史记录
        fetch-depth: 0

    # ====================== 环境配置阶段 ======================
    - name: 创建环境文件
      run: |
        # 检查原始文件是否存在
        if [ ! -f .env.example ]; then
          echo "错误：找不到.env.example文件"
          exit 1
        fi
        cp -v .env.example .env

    - name: 配置环境变量
      run: |
        # 使用@作为分隔符避免路径转义问题
        sed -i 's@^RENDERER_VITE_SERVER_URL=.*@RENDERER_VITE_SERVER_URL=https://musicapi.881128.xyz@' .env
        sed -i 's@^VITE_UNM_API=.*@VITE_UNM_API=https://unm.881128.xyz/@' .env
        sed -i 's@^RENDERER_VITE_SITE_URL=.*@RENDERER_VITE_SITE_URL=https://music.881128.xyz@' .env
        
        echo "当前环境文件内容："
        cat .env

    # ====================== 构建环境配置 ======================
    - name: 配置Node.js环境
      uses: actions/setup-node@v4
      with:
        # 自动获取最新LTS版本
        node-version: 'lts/*'
        # 自动安装最新pnpm版本
        pnpm-version: 'latest'
        # 缓存策略配置
        cache: 'pnpm'

    - name: 验证环境工具
      run: |
        echo "---- 版本信息 ----"
        node --version
        pnpm --version
        echo "-----------------"
        # 确认pnpm可执行路径
        which pnpm

    # ====================== 依赖安装阶段 ======================
    - name: 安装项目依赖
      run: |
        # 使用严格模式防止安装错误
        set -e
        pnpm install --strict-peer-dependencies --reporter=ndjson
        echo "依赖安装完成，磁盘使用情况："
        df -h

    # ====================== 构建阶段 ======================
    - name: 执行项目构建
      run: |
        pnpm run build --if-present
        echo "构建产物目录结构："
        ls -lR out

    # ====================== 发布准备阶段 ======================
    - name: 打包构建结果
      run: |
        # 创建带时间戳的压缩包
        timestamp=$(date +%Y%m%d-%H%M)
        zip_name="${{ github.event.inputs.release_name }}_${timestamp}.zip"
        zip -rq "${zip_name}" out/renderer
        echo "生成压缩包: ${zip_name}"

    # ====================== 发布阶段 ======================
    - name: 创建GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_gen.outputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        files: |
          *.zip
        draft: false
