name: 构建并发布 SPlayer

# 1. 手动触发（workflow_dispatch），并让用户在触发时输入 Release 名称
on:
  workflow_dispatch:
    inputs:
      release_name:
        description: '请输入本次 Release 的名称，用于打包文件名和 GitHub Release 标签'
        required: true

jobs:
  build-and-release:
    name: 编译 & 发布流程
    runs-on: ubuntu-latest

    steps:
      # ----------------------------------------------------
      # 步骤 1：检出当前仓库（权限配置）
      # ----------------------------------------------------
      - name: 检出当前仓库
        uses: actions/checkout@v3
        with:
          # 如果你需要拉取 submodule，可以在此开启
          submodules: 'recursive'
      
      # ----------------------------------------------------
      # 步骤 2：克隆 SPlayer 仓库的 master-fix 分支
      # ----------------------------------------------------
      - name: 克隆 SPlayer(master-fix 分支)
        run: |
          echo "开始克隆 IamFurina/SPlayer 仓库的 master-fix 分支..."
          git clone --branch master-fix https://github.com/IamFurina/SPlayer.git splayer
          echo "克隆完成，目录：splayer"

      # ----------------------------------------------------
      # 步骤 3：复制 .env.example 到 .env
      # ----------------------------------------------------
      - name: 准备环境配置文件 (.env)
        run: |
          echo "复制 .env.example 为 .env 文件..."
          cp splayer/.env.example splayer/.env
          echo "复制完成：splayer/.env"

      # ----------------------------------------------------
      # 步骤 4：使用 Python 修改 .env 中的变量值
      # ----------------------------------------------------
      - name: 使用 Python 更新 .env 配置
        run: |
          echo "开始通过 Python 脚本批量替换 .env 中的配置项..."
          python3 - << 'EOF'
import io, sys

env_file = 'splayer/.env'
# 读取原始文件内容
with io.open(env_file, 'r', encoding='utf-8') as f:
    lines = f.readlines()

# 新的配置值映射表
mapping = {
    'RENDERER_VITE_SERVER_URL': 'https://musicapi.881128.xyz',
    'VITE_UNM_API': 'https://unm.881128.xyz/',
    'RENDERER_VITE_SITE_URL': 'https://music.881128.xyz'
}

new_lines = []
for line in lines:
    # 如果行以某个变量名开头，则替换该行
    for key, val in mapping.items():
        if line.startswith(f"{key}="):
            line = f"{key}={val}\n"
            break
    new_lines.append(line)

# 将替换后的内容写回文件
with io.open(env_file, 'w', encoding='utf-8') as f:
    f.writelines(new_lines)

# 输出修改后的完整文件内容，以便调试查看
print("===== .env 文件修改后内容 =====")
with io.open(env_file, 'r', encoding='utf-8') as f:
    sys.stdout.write(f.read())
print("===== 结束 =====")
EOF

      # ----------------------------------------------------
      # 步骤 5：设置 Node.js 环境（使用最新 LTS 版本）
      # ----------------------------------------------------
      - name: 设置 Node.js (最新 LTS)
        uses: actions/setup-node@v3
        with:
          # 指定使用最新的 LTS 版本
          node-version: lts/*
          # 自动缓存 npm 依赖，加速后续构建
          cache: 'npm'
          cache-dependency-path: splayer/package-lock.json

      # ----------------------------------------------------
      # 步骤 6：安装项目依赖，显示详细安装进度
      # ----------------------------------------------------
      - name: 安装 npm 依赖
        working-directory: splayer
        run: |
          echo "🔧 开始安装 npm 依赖..."
          npm install --verbose
          echo "✅ 依赖安装完成"

      # ----------------------------------------------------
      # 步骤 7：执行项目构建，显示详细构建日志
      # ----------------------------------------------------
      - name: 构建项目 (npm run build)
        working-directory: splayer
        run: |
          echo "🏗️  开始项目构建..."
          npm run build --verbose
          echo "✅ 构建完成"

      # ----------------------------------------------------
      # 步骤 8：打包 out/renderer 文件夹
      # ----------------------------------------------------
      - name: 打包 renderer 输出目录
        run: |
          echo "📦 打包 splayer/out/renderer 目录..."
          cd splayer/out
          zip -r "../${{ github.event.inputs.release_name }}.zip" renderer
          echo "✅ 打包完成：splayer/out/${{ github.event.inputs.release_name }}.zip"

      # ----------------------------------------------------
      # 步骤 9：创建 GitHub Release 并上传打包文件
      # ----------------------------------------------------
      - name: 发布 Release 并上传资产
        uses: softprops/action-gh-release@v1
        with:
          # 标签名使用用户输入的 release_name
          tag_name: ${{ github.event.inputs.release_name }}
          # Release 名称同标签名
          name: ${{ github.event.inputs.release_name }}
          # 上传刚才生成的 zip 包
          files: splayer/out/${{ github.event.inputs.release_name }}.zip
        env:
          # 使用内置的 GITHUB_TOKEN 自动认证
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
