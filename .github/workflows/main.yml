name: 构建并发布 SPlayer

on:
  # 允许手动触发工作流
  workflow_dispatch:
    inputs:
      release_name:
        description: '发布的名称（将作为打包文件名）'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    # 需要写入权限来创建 Releases
    permissions:
      contents: write

    steps:
    # 生成唯一标签（使用时间戳格式）
    - name: 生成唯一标签
      id: generate_tag
      run: echo "tag=$(date +'v%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    # 步骤1：克隆指定仓库的 master-fix 分支
    - name: 克隆代码仓库
      uses: actions/checkout@v4
      with:
        # 指定要克隆的外部仓库
        repository: 'IamFurina/SPlayer'
        # 指定分支名称
        ref: 'master-fix'

    # 步骤2：复制环境变量文件
    - name: 创建环境配置文件
      run: cp .env.example .env

    # 步骤3：使用 sed 命令修改环境变量（兼容 Linux 环境）
    - name: 修改环境变量配置
      run: |
        # 替换音乐API地址（注意转义斜杠）
        sed -i 's/^RENDERER_VITE_SERVER_URL=.*/RENDERER_VITE_SERVER_URL=https:\/\/musicapi.881128.xyz/' .env
        
        # 替换UNM API地址（保留结尾斜杠）
        sed -i 's/^VITE_UNM_API=.*/VITE_UNM_API=https:\/\/unm.881128.xyz\//' .env
        
        # 替换站点地址
        sed -i 's/^RENDERER_VITE_SITE_URL=.*/RENDERER_VITE_SITE_URL=https:\/\/music.881128.xyz/' .env

    # 步骤4：显示修改后的配置文件内容（用于调试）
    - name: 显示修改后的环境文件
      run: cat .env

    # 步骤5：配置 Node.js 环境
    - name: 设置 Node.js 环境
      uses: actions/setup-node@v4
      with:
        # 使用最新 LTS 版本
        node-version: 'lts/*'
        # 启用 pnpm 缓存
        cache: 'pnpm'

    # 步骤6：安装 pnpm 包管理器
    - name: 安装 pnpm
      run: npm install -g pnpm

    # 步骤7：安装项目依赖（显示详细日志）
    - name: 安装项目依赖
      run: pnpm install --reporter append-only

    # 步骤8：执行项目构建（显示详细日志）
    - name: 构建项目
      run: pnpm build

    # 步骤9：打包构建产物（处理文件名中的空格）
    - name: 打包构建结果
      run: |
        # 创建临时目录存放打包文件
        mkdir -p artifact
        # 使用双引号包裹文件名以支持空格
        zip -r "artifact/${{ github.event.inputs.release_name }}.zip" out/renderer

    # 步骤10：创建 GitHub Release 并上传
    - name: 发布到 GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        # 使用生成的唯一标签
        tag_name: ${{ steps.generate_tag.outputs.tag }}
        # 使用用户输入的发布名称
        name: ${{ github.event.inputs.release_name }}
        # 指定要上传的打包文件
        files: artifact/${{ github.event.inputs.release_name }}.zip
        # 设置为正式版（非预发布）
        prerelease: false
        # 自动生成发布说明
        body: |
          自动构建发布包含以下更新：
          - 使用 Node.js 最新 LTS 版本
          - 环境变量已更新配置
          - 构建时间：${{ steps.generate_tag.outputs.tag }}
