name: Build and Release SPlayer

on:
  # 允许手动触发工作流
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release名称'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    # 步骤1：克隆指定仓库的master-fix分支
    - name: 克隆仓库
      uses: actions/checkout@v4
      with:
        # 指定要克隆的仓库地址
        repository: 'IamFurina/SPlayer'
        # 指定要克隆的分支
        ref: 'master-fix'
        # 将仓库克隆到splayer子目录
        path: splayer

    # 步骤2：设置Python环境（用于修改.env文件）
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # 步骤3：处理.env文件
    - name: 配置环境变量
      working-directory: ./splayer  # 进入项目目录
      run: |
        # 复制环境示例文件
        cp .env.example .env

        # 使用Python脚本修改.env文件
        python <<EOF
        import re
        
        # 需要修改的配置项
        replacements = {
            'RENDERER_VITE_SERVER_URL': 'https://musicapi.881128.xyz',
            'VITE_UNM_API': 'https://unm.881128.xyz/',
            'RENDERER_VITE_SITE_URL': 'https://music.881128.xyz'
        }
        
        # 读取.env文件内容
        with open('.env', 'r') as f:
            lines = f.readlines()
        
        # 逐行查找并替换配置
        new_lines = []
        for line in lines:
            for key, value in replacements.items():
                # 使用正则匹配键名（兼容各种可能的格式）
                if re.match(f'^{key}=', line.strip()):
                    line = f'{key}={value}\n'
                    break
            new_lines.append(line)
        
        # 写入修改后的内容
        with open('.env', 'w') as f:
            f.writelines(new_lines)
        
        # 打印修改后的文件内容
        print("修改后的.env文件内容：")
        with open('.env', 'r') as f:
            print(f.read())
        EOF

    # 步骤4：设置Node.js环境
    - name: 设置Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 'latest'  # 使用最新版Node.js
        cache: 'npm'           # 启用npm缓存加速安装

    # 步骤5：安装依赖并构建
    - name: 安装依赖和构建
      working-directory: ./splayer  # 确保在项目目录执行
      run: |
        # 显示详细版本信息
        node -v
        npm -v
        
        # 安装依赖（显示完整进度）
        npm install --loglevel verbose
        
        # 执行构建命令
        npm run build --if-present

    # 步骤6：打包构建结果
    - name: 打包构建产物
      working-directory: ./splayer  # 进入项目目录
      run: |
        # 创建临时目录存放打包文件
        mkdir -p artifact
        
        # 使用当前日期时间作为默认打包文件名
        default_name=$(date +'build-%Y%m%d-%H%M%S')
        
        # 打包renderer目录（使用输入参数或默认名称）
        tar -czvf artifact/${{ inputs.release_name || default_name }}.tar.gz -C out/renderer .

    # 步骤7：发布到GitHub Releases
    - name: 创建Release
      uses: softprops/action-gh-release@v1
      with:
        # 使用手动输入的release名称
        name: ${{ inputs.release_name }}
        # 上传打包好的文件
        files: |
          splayer/artifact/*.tar.gz
      env:
        # 使用GitHub自动生成的token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
