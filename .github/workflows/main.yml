name: 构建并发布 SPlayer

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: '请输入本次 Release 的名称，用于打包文件名和 GitHub Release 标签'
        required: true

jobs:
  build-and-release:
    name: 编译 & 发布流程
    runs-on: ubuntu-latest

    steps:
      # 步骤 1：克隆指定分支
      - name: 克隆 SPlayer(master-fix 分支)
        run: |
          echo "开始克隆 IamFurina/SPlayer 仓库的 master-fix 分支..."
          git clone --branch master-fix https://github.com/IamFurina/SPlayer.git splayer
          echo "克隆完成"

      # 步骤 2：复制 .env.example 为 .env
      - name: 准备 .env 文件
        run: |
          echo "复制 .env.example 为 .env..."
          cp splayer/.env.example splayer/.env
          echo "复制完成"

      # 步骤 3：Python 一步替换 .env 内容并输出结果
      - name: 更新 .env 变量
        run: |
          echo "开始更新 .env..."
          python3 - << 'EOF'
#!/usr/bin/env python3
import re, sys

env_path = 'splayer/.env'
with open(env_path, 'r', encoding='utf-8') as f:
    content = f.read()

mapping = {
    'RENDERER_VITE_SERVER_URL': 'https://musicapi.881128.xyz',
    'VITE_UNM_API':              'https://unm.881128.xyz/',
    'RENDERER_VITE_SITE_URL':    'https://music.881128.xyz'
}

for key, val in mapping.items():
    # 匹配 key= 前面可能有空格，value 统一加双引号
    content = re.sub(
        rf'^{key}\s*=.*$',
        f'{key} = "{val}"',
        content,
        flags=re.MULTILINE
    )

with open(env_path, 'w', encoding='utf-8') as f:
    f.write(content)

print("===== .env 修改后内容 =====")
print(content)
print("===== 结束 =====")
EOF

      # 步骤 4：设置 Node.js（最新 LTS）、缓存 npm
      - name: 设置 Node.js 环境
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: splayer/package.json

      # 步骤 5：安装依赖（verbose 模式）
      - name: 安装 npm 依赖
        working-directory: splayer
        run: |
          echo "🔧 安装依赖中..."
          npm install --verbose
          echo "✅ 依赖安装完成"

      # 步骤 6：构建项目（verbose 模式）
      - name: 构建项目
        working-directory: splayer
        run: |
          echo "🏗️ 构建中..."
          npm run build --verbose
          echo "✅ 构建完成"

      # 步骤 7：打包 renderer 输出（.zip & .tar.gz）
      - name: 打包 renderer 目录
        run: |
          echo "📦 打包 splayer/out/renderer..."
          cd splayer/out
          zip -r "../${{ github.event.inputs.release_name }}.zip" renderer
          tar -czf "../${{ github.event.inputs.release_name }}.tar.gz" renderer
          echo "✅ 打包完成"

      # 步骤 8：创建 Release 并上传两种压缩包
      - name: 发布 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release_name }}
          name:     ${{ github.event.inputs.release_name }}
          files: |
            splayer/out/${{ github.event.inputs.release_name }}.zip
            splayer/out/${{ github.event.inputs.release_name }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
