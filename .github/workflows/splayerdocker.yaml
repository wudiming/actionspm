name: SPlayer Runtime-Build Docker Image

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      PROJECT_DIR: SPlayer

    steps:
      - name: 获取上游 SPlayer 最新 Release 版本号
        id: get_release
        run: |
          tag=$(curl -s https://api.github.com/repos/IamFurina/SPlayer/releases/latest | jq -r .tag_name)
          echo "RELEASE_TAG=$tag" >> $GITHUB_ENV

      - name: Checkout（用于上传构建产物）
        uses: actions/checkout@v4

      - name: 克隆 SPlayer 源码
        run: git clone https://github.com/IamFurina/SPlayer.git

      - name: 配置环境变量（修改 .env）
        working-directory: ./SPlayer
        run: |
          cp -p .env.example .env
          python3 <<"EOF"
          import re
          from pathlib import Path
          replacements = {
              'RENDERER_VITE_SERVER_URL': {
                  'value': 'https://musicapi.881128.xyz',
                  'pattern': r'^(RENDERER_VITE_SERVER_URL\s*=\s*)(["\']?)(.*?)(["\']?)(\s*#.*)?$'
              },
              'VITE_UNM_API': {
                  'value': 'https://unm.881128.xyz',
                  'pattern': r'^(VITE_UNM_API\s*=\s*)(["\']?)(.*?)(["\']?)(\s*#.*)?$'
              },
              'RENDERER_VITE_SITE_URL': {
                  'value': 'https://music.881128.xyz',
                  'pattern': r'^(RENDERER_VITE_SITE_URL\s*=\s*)(["\']?)(.*?)(["\']?)(\s*#.*)?$'
              }
          }
          env_file = Path('.env')
          content = env_file.read_text()
          modified = 0
          for key, cfg in replacements.items():
              pattern = re.compile(cfg['pattern'], re.MULTILINE | re.IGNORECASE)
              new_content, count = re.subn(pattern, lambda m: f"{m.group(1)}{cfg['value']}{m.group(5) or ''}", content)
              if count > 0:
                  content = new_content
                  modified += 1
              else:
                  content += f"\n{key}={cfg['value']}"
                  modified += 1
          if modified != 3:
              raise ValueError(f"应修改3个配置项，实际修改{modified}")
          content = '\n'.join(line.rstrip() for line in content.splitlines())
          env_file.write_text(content + '\n')
          EOF

      - name: 安装依赖并构建 SPlayer
        working-directory: ./SPlayer
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm install
          pnpm build

      - name: 添加 Dockerfile
        working-directory: ./SPlayer
        run: |
          cat <<'EOF' > Dockerfile
          FROM nginx:1.25-alpine

          COPY ./out/renderer /usr/share/nginx/html

          EXPOSE 80

          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建并推送 Runtime 镜像（已构建前端）
        uses: docker/build-push-action@v5
        with:
          context: ./SPlayer
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            wudiming/prosp:latest
            wudiming/prosp:${{ env.RELEASE_TAG }}
